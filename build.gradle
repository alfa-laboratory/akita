buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
        classpath 'com.netflix.nebula:nebula-release-plugin:4.2.0'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5'
    }
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'nebula.nebula-release'
apply plugin: 'org.sonarqube'


tasks.release.dependsOn tasks.artifactoryPublish

group = 'ru.alfabank.tests'

description = """light testing framework Testiod0r"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext {
    cucumberVersion = '1.2.5'
}

dependencies {
    compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.8'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.10'
    compile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'com.codeborne', name: 'selenide', version: '4.3'
    compile group: 'info.cukes', name: 'cucumber-java', version: cucumberVersion
    compile group: 'info.cukes', name: 'cucumber-core', version: cucumberVersion
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.21'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.2'
    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'


sonarqube {
    properties {
        property 'sonar.projectName', rootProject.name
        property 'sonar.projectDescription', "Testiod0r autotest framework"
        property 'sonar.sourceEncoding', 'UTF-8'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = 'Autotests'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications ('maven')
        }
    }
}

artifactoryPublish {
    dependsOn jar
}

task createReleaseNotes {
    dependsOn tasks.final
    def getVersionName = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        String tagAndSHA = stdout.toString().trim()
        String tag = tagAndSHA.substring(0, tagAndSHA.indexOf("-"))
        return tag
    }
    doLast {
        String tag = getVersionName()
        String filePath = "ReleaseNotes/" + tag
        new File(filePath).mkdir()
        String file = filePath + "/ReleaseNotes-" + tag + ".md"
        def releaseNotes = new File(file)
        releaseNotes << new File("ReleaseNotes/template").text
        ant.replace(file: releaseNotes, token: "\$(tag)", value: tag)
    }

}